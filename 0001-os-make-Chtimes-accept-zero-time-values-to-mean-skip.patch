From df1a5ebd2f61261340cb2b52d45d1540e22d6722 Mon Sep 17 00:00:00 2001
From: Constantin Konstantinidis <constantinkonstantinidis@gmail.com>
Date: Sat, 15 Aug 2020 11:47:16 +0200
Subject: [PATCH] os: make Chtimes accept zero time values to mean skipping
 file modification

This change allows Chtimes to accept zero time values for its arguments, so:

    os.Chtimes(filename, time.Time{}, tn)
    os.Chtimes(filename, tn, time.Time{})
which will avoid making time modifications of the file's
AccessTime and ModTime respectively or both when combined.

Fixes #32558

Change-Id: I1aff42f30668ff505ecec2e9509d8f2b8e4b1b6a
---
 src/internal/syscall/unix/at_aix.go           |  1 +
 src/internal/syscall/unix/at_darwin.go        |  2 +
 src/internal/syscall/unix/at_freebsd.go       |  2 +
 src/internal/syscall/unix/at_js.go            |  9 +++
 src/internal/syscall/unix/at_solaris.go       |  2 +
 .../syscall/unix/at_sysnum_dragonfly.go       |  2 +
 src/internal/syscall/unix/at_sysnum_linux.go  |  2 +
 src/internal/syscall/unix/at_sysnum_netbsd.go |  2 +
 .../syscall/unix/at_sysnum_openbsd.go         |  2 +
 src/os/file_plan9.go                          |  7 ++
 src/os/file_posix.go                          | 19 ++++-
 src/os/file_unix.go                           |  2 +
 src/os/file_windows.go                        |  2 +
 src/os/os_test.go                             | 80 +++++++++++++++++++
 src/syscall/fs_js.go                          | 12 +++
 src/syscall/tables_js.go                      |  4 +
 src/syscall/types_windows.go                  |  3 +
 17 files changed, 151 insertions(+), 2 deletions(-)
 create mode 100644 src/internal/syscall/unix/at_js.go

diff --git a/src/internal/syscall/unix/at_aix.go b/src/internal/syscall/unix/at_aix.go
index 425df98211..3fe3285ce2 100644
--- a/src/internal/syscall/unix/at_aix.go
+++ b/src/internal/syscall/unix/at_aix.go
@@ -11,4 +11,5 @@ package unix
 const (
 	AT_REMOVEDIR        = 0x1
 	AT_SYMLINK_NOFOLLOW = 0x1
+	UTIME_OMIT          = -0x3
 )
diff --git a/src/internal/syscall/unix/at_darwin.go b/src/internal/syscall/unix/at_darwin.go
index a88a27e0c6..e2f17187e0 100644
--- a/src/internal/syscall/unix/at_darwin.go
+++ b/src/internal/syscall/unix/at_darwin.go
@@ -9,6 +9,8 @@ import (
 	_ "unsafe" // for linkname
 )
 
+const UTIME_OMIT = -0x2
+
 func Unlinkat(dirfd int, path string, flags int) error {
 	return unlinkat(dirfd, path, flags)
 }
diff --git a/src/internal/syscall/unix/at_freebsd.go b/src/internal/syscall/unix/at_freebsd.go
index e171f4dbb5..6cc5e8aef5 100644
--- a/src/internal/syscall/unix/at_freebsd.go
+++ b/src/internal/syscall/unix/at_freebsd.go
@@ -12,6 +12,8 @@ import (
 const (
 	AT_REMOVEDIR        = 0x800
 	AT_SYMLINK_NOFOLLOW = 0x200
+
+	UTIME_OMIT = -0x2
 )
 
 func Unlinkat(dirfd int, path string, flags int) error {
diff --git a/src/internal/syscall/unix/at_js.go b/src/internal/syscall/unix/at_js.go
new file mode 100644
index 0000000000..b51f092e16
--- /dev/null
+++ b/src/internal/syscall/unix/at_js.go
@@ -0,0 +1,9 @@
+// Copyright 2018 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package unix
+
+const (
+	UTIME_OMIT = -0x2
+)
diff --git a/src/internal/syscall/unix/at_solaris.go b/src/internal/syscall/unix/at_solaris.go
index e917c4fc9b..4ab224d670 100644
--- a/src/internal/syscall/unix/at_solaris.go
+++ b/src/internal/syscall/unix/at_solaris.go
@@ -16,4 +16,6 @@ func syscall6(trap, nargs, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err
 const (
 	AT_REMOVEDIR        = 0x1
 	AT_SYMLINK_NOFOLLOW = 0x1000
+
+	UTIME_OMIT = -0x2
 )
diff --git a/src/internal/syscall/unix/at_sysnum_dragonfly.go b/src/internal/syscall/unix/at_sysnum_dragonfly.go
index cec9abce6a..3ae70c3687 100644
--- a/src/internal/syscall/unix/at_sysnum_dragonfly.go
+++ b/src/internal/syscall/unix/at_sysnum_dragonfly.go
@@ -12,3 +12,5 @@ const fstatatTrap uintptr = syscall.SYS_FSTATAT
 
 const AT_REMOVEDIR = 0x2
 const AT_SYMLINK_NOFOLLOW = 0x1
+
+const UTIME_OMIT = -0x2
diff --git a/src/internal/syscall/unix/at_sysnum_linux.go b/src/internal/syscall/unix/at_sysnum_linux.go
index fa7cd75d42..f31c3a9315 100644
--- a/src/internal/syscall/unix/at_sysnum_linux.go
+++ b/src/internal/syscall/unix/at_sysnum_linux.go
@@ -11,3 +11,5 @@ const openatTrap uintptr = syscall.SYS_OPENAT
 
 const AT_REMOVEDIR = 0x200
 const AT_SYMLINK_NOFOLLOW = 0x100
+
+const UTIME_OMIT = 0x3ffffffe
diff --git a/src/internal/syscall/unix/at_sysnum_netbsd.go b/src/internal/syscall/unix/at_sysnum_netbsd.go
index fe45e296d7..02f22ad763 100644
--- a/src/internal/syscall/unix/at_sysnum_netbsd.go
+++ b/src/internal/syscall/unix/at_sysnum_netbsd.go
@@ -12,3 +12,5 @@ const fstatatTrap uintptr = syscall.SYS_FSTATAT
 
 const AT_REMOVEDIR = 0x800
 const AT_SYMLINK_NOFOLLOW = 0x200
+
+const UTIME_OMIT = ((1 << 30) - 2)
diff --git a/src/internal/syscall/unix/at_sysnum_openbsd.go b/src/internal/syscall/unix/at_sysnum_openbsd.go
index c2d48b9914..fd389477ec 100644
--- a/src/internal/syscall/unix/at_sysnum_openbsd.go
+++ b/src/internal/syscall/unix/at_sysnum_openbsd.go
@@ -12,3 +12,5 @@ const fstatatTrap uintptr = syscall.SYS_FSTATAT
 
 const AT_REMOVEDIR = 0x08
 const AT_SYMLINK_NOFOLLOW = 0x02
+
+const UTIME_OMIT = -0x1
diff --git a/src/os/file_plan9.go b/src/os/file_plan9.go
index eb158905ab..5279db7586 100644
--- a/src/os/file_plan9.go
+++ b/src/os/file_plan9.go
@@ -402,6 +402,7 @@ func chmod(name string, mode FileMode) error {
 
 // Chtimes changes the access and modification times of the named
 // file, similar to the Unix utime() or utimes() functions.
+// A zero time.Time value will leave the corresponding file time unchanged.
 //
 // The underlying filesystem may truncate or round the values to a
 // less precise time unit.
@@ -412,6 +413,12 @@ func Chtimes(name string, atime time.Time, mtime time.Time) error {
 	d.Null()
 	d.Atime = uint32(atime.Unix())
 	d.Mtime = uint32(mtime.Unix())
+	if atime.IsZero() {
+		d.Atime = 0xFFFFFFFF
+	}
+	if mtime.IsZero() {
+		d.Mtime = 0xFFFFFFFF
+	}
 
 	var buf [syscall.STATFIXLEN]byte
 	n, err := d.Marshal(buf[:])
diff --git a/src/os/file_posix.go b/src/os/file_posix.go
index 24ea554b62..724408c3d2 100644
--- a/src/os/file_posix.go
+++ b/src/os/file_posix.go
@@ -163,14 +163,29 @@ func (f *File) Sync() error {
 
 // Chtimes changes the access and modification times of the named
 // file, similar to the Unix utime() or utimes() functions.
+// A zero time.Time value will leave the corresponding file time unchanged.
 //
 // The underlying filesystem may truncate or round the values to a
 // less precise time unit.
 // If there is an error, it will be of type *PathError.
 func Chtimes(name string, atime time.Time, mtime time.Time) error {
 	var utimes [2]syscall.Timespec
-	utimes[0] = syscall.NsecToTimespec(atime.UnixNano())
-	utimes[1] = syscall.NsecToTimespec(mtime.UnixNano())
+	utimeOmit := syscall.Timespec{Sec: _UTIME_OMIT, Nsec: _UTIME_OMIT}
+	if atime.IsZero() {
+		utimes[0] = utimeOmit
+	}
+	if mtime.IsZero() {
+		utimes[1] = utimeOmit
+	}
+	set := func(i int, t time.Time) {
+		if t.IsZero() {
+			utimes[i] = utimeOmit
+		} else {
+			utimes[i] = syscall.NsecToTimespec(t.UnixNano())
+		}
+	}
+	set(0, atime)
+	set(1, mtime)
 	if e := syscall.UtimesNano(fixLongPath(name), utimes[0:]); e != nil {
 		return &PathError{"chtimes", name, e}
 	}
diff --git a/src/os/file_unix.go b/src/os/file_unix.go
index f2c00ae0cb..7b172b895b 100644
--- a/src/os/file_unix.go
+++ b/src/os/file_unix.go
@@ -14,6 +14,8 @@ import (
 	"syscall"
 )
 
+const _UTIME_OMIT = unix.UTIME_OMIT
+
 // fixLongPath is a noop on non-Windows platforms.
 func fixLongPath(path string) string {
 	return path
diff --git a/src/os/file_windows.go b/src/os/file_windows.go
index cc695fd94c..00d2fb5ec0 100644
--- a/src/os/file_windows.go
+++ b/src/os/file_windows.go
@@ -14,6 +14,8 @@ import (
 	"unsafe"
 )
 
+const _UTIME_OMIT = 0
+
 // file is the real representation of *File.
 // The extra level of indirection ensures that no clients of os
 // can overwrite this data, which could cause the finalizer
diff --git a/src/os/os_test.go b/src/os/os_test.go
index e8c64510f5..0af3cb5375 100644
--- a/src/os/os_test.go
+++ b/src/os/os_test.go
@@ -1277,6 +1277,86 @@ func TestFileChdir(t *testing.T) {
 	}
 }
 
+func TestChtimesWithZeroTimes(t *testing.T) {
+
+	file := newFile("chtimes-with-zero", t)
+	defer Remove(file.Name())
+
+	_, err := file.Write([]byte("hello, world\n"))
+	if err != nil {
+		t.Fatalf("Write: %s", err)
+	}
+	fs, err := Stat(file.Name())
+	if err != nil {
+		t.Fatal(err)
+	}
+	var startAtime time.Time = Atime(fs)
+	startMtime := fs.ModTime()
+	switch runtime.GOOS {
+	case "js":
+		startAtime = startAtime.Truncate(time.Second)
+		startMtime = startMtime.Truncate(time.Second)
+	}
+	at0 := startAtime
+	mt0 := startMtime
+	t0 := startMtime.Truncate(time.Second).Add(1 * time.Hour)
+
+	tests := []struct {
+		aTime     time.Time
+		mTime     time.Time
+		wantATime time.Time
+		wantMTime time.Time
+	}{
+		{
+			aTime:     time.Time{},
+			mTime:     time.Time{},
+			wantATime: startAtime,
+			wantMTime: startMtime,
+		},
+		{
+			aTime:     t0.Add(200 * time.Second),
+			mTime:     time.Time{},
+			wantATime: t0.Add(200 * time.Second),
+			wantMTime: startMtime,
+		},
+		{
+			mTime:     t0.Add(100 * time.Second),
+			wantATime: t0.Add(200 * time.Second),
+			wantMTime: t0.Add(100 * time.Second),
+		},
+		{
+			mTime:     t0.Add(100 * time.Second),
+			aTime:     t0.Add(300 * time.Second),
+			wantMTime: t0.Add(100 * time.Second),
+			wantATime: t0.Add(300 * time.Second),
+		},
+	}
+
+	for _, tt := range tests {
+		t.Logf("ATime:%q-MTime:%q", tt.aTime, tt.mTime)
+
+		// Now change the times accordingly.
+		if err := Chtimes(file.Name(), tt.aTime, tt.mTime); err != nil {
+			t.Error(err)
+		}
+
+		// Finally verify the expectations.
+		fs, err = Stat(file.Name())
+		if err != nil {
+			t.Error(err)
+		}
+		at0 = Atime(fs)
+		mt0 = fs.ModTime()
+
+		if got, want := at0, tt.wantATime; !got.Equal(want) {
+			t.Errorf("AccessTime mismatch:\ngot:  %q\nwant: %q", got, want)
+		}
+		if got, want := mt0, tt.wantMTime; !got.Equal(want) {
+			t.Errorf("ModTime mismatch:\ngot:  %q\nwant: %q", got, want)
+		}
+	}
+}
+
 func TestChdirAndGetwd(t *testing.T) {
 	// TODO(brainman): file.Chdir() is not implemented on windows.
 	if runtime.GOOS == "windows" {
diff --git a/src/syscall/fs_js.go b/src/syscall/fs_js.go
index 262ec28afd..767b15ca82 100644
--- a/src/syscall/fs_js.go
+++ b/src/syscall/fs_js.go
@@ -282,6 +282,18 @@ func UtimesNano(path string, ts []Timespec) error {
 	}
 	atime := ts[0].Sec
 	mtime := ts[1].Sec
+	if atime == UTIME_OMIT || mtime == UTIME_OMIT {
+		var st Stat_t
+		if err := Stat(path, &st); err != nil {
+			return err
+		}
+		if atime == UTIME_OMIT {
+			atime = st.Atime
+		}
+		if mtime == UTIME_OMIT {
+			mtime = st.Mtime
+		}
+	}
 	_, err := fsCall("utimes", path, atime, mtime)
 	return err
 }
diff --git a/src/syscall/tables_js.go b/src/syscall/tables_js.go
index a7c4f8c890..794bf70663 100644
--- a/src/syscall/tables_js.go
+++ b/src/syscall/tables_js.go
@@ -492,3 +492,7 @@ var errnoByCode = map[string]Errno{
 	"ECASECLASH":      ECASECLASH,
 	"EWOULDBLOCK":     EWOULDBLOCK,
 }
+
+// UTIME_OMIT is the sentinel value to indicate that a time value of a file should not
+// be changed when using Chtimes.
+const UTIME_OMIT =  -0x2
diff --git a/src/syscall/types_windows.go b/src/syscall/types_windows.go
index 0349f3b180..424f4566f2 100644
--- a/src/syscall/types_windows.go
+++ b/src/syscall/types_windows.go
@@ -362,6 +362,9 @@ func (ft *Filetime) Nanoseconds() int64 {
 }
 
 func NsecToFiletime(nsec int64) (ft Filetime) {
+	if nsec == 0 {
+		return
+	}
 	// convert into 100-nanosecond
 	nsec /= 100
 	// change starting time to January 1, 1601
-- 
2.22.0.windows.1

