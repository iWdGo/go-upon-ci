From e1fc4eb3fb67e5e40f14581038bf33f43a184655 Mon Sep 17 00:00:00 2001
From: Constantin Konstantinidis <constantinkonstantinidis@gmail.com>
Date: Sun, 11 Oct 2020 12:02:23 +0200
Subject: [PATCH] os: make Chtimes accept zero time values to mean skipping
 file modification

This change allows Chtimes to accept zero time values for its arguments, so:

    os.Chtimes(filename, time.Time{}, tn)
    os.Chtimes(filename, tn, time.Time{})
which will avoid making time modifications of the file's
AccessTime and ModTime respectively.

Fixes #32558

Change-Id: I1aff42f30668ff505ecec2e9509d8f2b8e4b1b6a
---
 src/internal/syscall/unix/at_aix.go           |   1 +
 src/internal/syscall/unix/at_darwin.go        |   2 +
 src/internal/syscall/unix/at_freebsd.go       |   2 +
 src/internal/syscall/unix/at_js.go            |  13 ++
 src/internal/syscall/unix/at_solaris.go       |   2 +
 .../syscall/unix/at_sysnum_dragonfly.go       |   2 +
 src/internal/syscall/unix/at_sysnum_linux.go  |   2 +
 src/internal/syscall/unix/at_sysnum_netbsd.go |   2 +
 .../syscall/unix/at_sysnum_openbsd.go         |   2 +
 src/os/file_plan9.go                          |   7 +
 src/os/file_posix.go                          |  12 +-
 src/os/file_unix.go                           |   2 +
 src/os/file_windows.go                        |   2 +
 src/os/os_test.go                             | 114 +++++++++++++
 src/syscall/fs_js.go                          |  14 ++
 src/syscall/syscall_bsd.go                    |   6 +-
 src/syscall/syscall_darwin.go                 |  15 +-
 src/syscall/syscall_windows.go                |  20 ++-
 src/syscall/zsyscall_darwin_adm64.s           |   0
 src/syscall/zsyscall_darwin_amd64.go          | 154 ++++--------------
 src/syscall/zsyscall_darwin_amd64.s           |   4 +
 21 files changed, 244 insertions(+), 134 deletions(-)
 create mode 100644 src/internal/syscall/unix/at_js.go
 create mode 100644 src/syscall/zsyscall_darwin_adm64.s

diff --git a/src/internal/syscall/unix/at_aix.go b/src/internal/syscall/unix/at_aix.go
index 425df98211..3fe3285ce2 100644
--- a/src/internal/syscall/unix/at_aix.go
+++ b/src/internal/syscall/unix/at_aix.go
@@ -11,4 +11,5 @@ package unix
 const (
 	AT_REMOVEDIR        = 0x1
 	AT_SYMLINK_NOFOLLOW = 0x1
+	UTIME_OMIT          = -0x3
 )
diff --git a/src/internal/syscall/unix/at_darwin.go b/src/internal/syscall/unix/at_darwin.go
index a88a27e0c6..e2f17187e0 100644
--- a/src/internal/syscall/unix/at_darwin.go
+++ b/src/internal/syscall/unix/at_darwin.go
@@ -9,6 +9,8 @@ import (
 	_ "unsafe" // for linkname
 )
 
+const UTIME_OMIT = -0x2
+
 func Unlinkat(dirfd int, path string, flags int) error {
 	return unlinkat(dirfd, path, flags)
 }
diff --git a/src/internal/syscall/unix/at_freebsd.go b/src/internal/syscall/unix/at_freebsd.go
index e171f4dbb5..6cc5e8aef5 100644
--- a/src/internal/syscall/unix/at_freebsd.go
+++ b/src/internal/syscall/unix/at_freebsd.go
@@ -12,6 +12,8 @@ import (
 const (
 	AT_REMOVEDIR        = 0x800
 	AT_SYMLINK_NOFOLLOW = 0x200
+
+	UTIME_OMIT = -0x2
 )
 
 func Unlinkat(dirfd int, path string, flags int) error {
diff --git a/src/internal/syscall/unix/at_js.go b/src/internal/syscall/unix/at_js.go
new file mode 100644
index 0000000000..f63ca97c31
--- /dev/null
+++ b/src/internal/syscall/unix/at_js.go
@@ -0,0 +1,13 @@
+// Copyright 2018 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package unix
+
+const (
+	// UTIME_OMIT is the sentinel value to indicate that a time value should not
+	// be changed. It is useful for example to indicate for example with UtimesNano
+	// to avoid changing AccessTime or ModifiedTime.
+	// Its value must match syscall/fs_js.go
+	UTIME_OMIT = -0x2
+)
diff --git a/src/internal/syscall/unix/at_solaris.go b/src/internal/syscall/unix/at_solaris.go
index e917c4fc9b..4ab224d670 100644
--- a/src/internal/syscall/unix/at_solaris.go
+++ b/src/internal/syscall/unix/at_solaris.go
@@ -16,4 +16,6 @@ func syscall6(trap, nargs, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err
 const (
 	AT_REMOVEDIR        = 0x1
 	AT_SYMLINK_NOFOLLOW = 0x1000
+
+	UTIME_OMIT = -0x2
 )
diff --git a/src/internal/syscall/unix/at_sysnum_dragonfly.go b/src/internal/syscall/unix/at_sysnum_dragonfly.go
index cec9abce6a..3ae70c3687 100644
--- a/src/internal/syscall/unix/at_sysnum_dragonfly.go
+++ b/src/internal/syscall/unix/at_sysnum_dragonfly.go
@@ -12,3 +12,5 @@ const fstatatTrap uintptr = syscall.SYS_FSTATAT
 
 const AT_REMOVEDIR = 0x2
 const AT_SYMLINK_NOFOLLOW = 0x1
+
+const UTIME_OMIT = -0x2
diff --git a/src/internal/syscall/unix/at_sysnum_linux.go b/src/internal/syscall/unix/at_sysnum_linux.go
index fa7cd75d42..f31c3a9315 100644
--- a/src/internal/syscall/unix/at_sysnum_linux.go
+++ b/src/internal/syscall/unix/at_sysnum_linux.go
@@ -11,3 +11,5 @@ const openatTrap uintptr = syscall.SYS_OPENAT
 
 const AT_REMOVEDIR = 0x200
 const AT_SYMLINK_NOFOLLOW = 0x100
+
+const UTIME_OMIT = 0x3ffffffe
diff --git a/src/internal/syscall/unix/at_sysnum_netbsd.go b/src/internal/syscall/unix/at_sysnum_netbsd.go
index fe45e296d7..02f22ad763 100644
--- a/src/internal/syscall/unix/at_sysnum_netbsd.go
+++ b/src/internal/syscall/unix/at_sysnum_netbsd.go
@@ -12,3 +12,5 @@ const fstatatTrap uintptr = syscall.SYS_FSTATAT
 
 const AT_REMOVEDIR = 0x800
 const AT_SYMLINK_NOFOLLOW = 0x200
+
+const UTIME_OMIT = ((1 << 30) - 2)
diff --git a/src/internal/syscall/unix/at_sysnum_openbsd.go b/src/internal/syscall/unix/at_sysnum_openbsd.go
index c2d48b9914..fd389477ec 100644
--- a/src/internal/syscall/unix/at_sysnum_openbsd.go
+++ b/src/internal/syscall/unix/at_sysnum_openbsd.go
@@ -12,3 +12,5 @@ const fstatatTrap uintptr = syscall.SYS_FSTATAT
 
 const AT_REMOVEDIR = 0x08
 const AT_SYMLINK_NOFOLLOW = 0x02
+
+const UTIME_OMIT = -0x1
diff --git a/src/os/file_plan9.go b/src/os/file_plan9.go
index a1a51a1c06..39f8b76779 100644
--- a/src/os/file_plan9.go
+++ b/src/os/file_plan9.go
@@ -407,6 +407,7 @@ func chmod(name string, mode FileMode) error {
 
 // Chtimes changes the access and modification times of the named
 // file, similar to the Unix utime() or utimes() functions.
+// A zero time.Time value will leave the corresponding file time unchanged.
 //
 // The underlying filesystem may truncate or round the values to a
 // less precise time unit.
@@ -417,6 +418,12 @@ func Chtimes(name string, atime time.Time, mtime time.Time) error {
 	d.Null()
 	d.Atime = uint32(atime.Unix())
 	d.Mtime = uint32(mtime.Unix())
+	if atime.IsZero() {
+		d.Atime = 0xFFFFFFFF
+	}
+	if mtime.IsZero() {
+		d.Mtime = 0xFFFFFFFF
+	}
 
 	var buf [syscall.STATFIXLEN]byte
 	n, err := d.Marshal(buf[:])
diff --git a/src/os/file_posix.go b/src/os/file_posix.go
index ae23d22d0a..42773c1b96 100644
--- a/src/os/file_posix.go
+++ b/src/os/file_posix.go
@@ -173,14 +173,22 @@ func (f *File) Sync() error {
 
 // Chtimes changes the access and modification times of the named
 // file, similar to the Unix utime() or utimes() functions.
+// A zero time.Time value will leave the corresponding file time unchanged.
 //
 // The underlying filesystem may truncate or round the values to a
 // less precise time unit.
 // If there is an error, it will be of type *PathError.
 func Chtimes(name string, atime time.Time, mtime time.Time) error {
 	var utimes [2]syscall.Timespec
-	utimes[0] = syscall.NsecToTimespec(atime.UnixNano())
-	utimes[1] = syscall.NsecToTimespec(mtime.UnixNano())
+	set := func(i int, t time.Time) {
+		if t.IsZero() {
+			utimes[i] = syscall.Timespec{Sec: _UTIME_OMIT, Nsec: _UTIME_OMIT}
+		} else {
+			utimes[i] = syscall.NsecToTimespec(t.UnixNano())
+		}
+	}
+	set(0, atime)
+	set(1, mtime)
 	if e := syscall.UtimesNano(fixLongPath(name), utimes[0:]); e != nil {
 		return &PathError{"chtimes", name, e}
 	}
diff --git a/src/os/file_unix.go b/src/os/file_unix.go
index e0f16d809d..6db2c9e254 100644
--- a/src/os/file_unix.go
+++ b/src/os/file_unix.go
@@ -14,6 +14,8 @@ import (
 	"syscall"
 )
 
+const _UTIME_OMIT = unix.UTIME_OMIT
+
 // fixLongPath is a noop on non-Windows platforms.
 func fixLongPath(path string) string {
 	return path
diff --git a/src/os/file_windows.go b/src/os/file_windows.go
index f744a35023..e996fba600 100644
--- a/src/os/file_windows.go
+++ b/src/os/file_windows.go
@@ -14,6 +14,8 @@ import (
 	"unsafe"
 )
 
+const _UTIME_OMIT = 0
+
 // file is the real representation of *File.
 // The extra level of indirection ensures that no clients of os
 // can overwrite this data, which could cause the finalizer
diff --git a/src/os/os_test.go b/src/os/os_test.go
index 2bb57d866f..3dd92bf858 100644
--- a/src/os/os_test.go
+++ b/src/os/os_test.go
@@ -1286,6 +1286,120 @@ func TestFileChdir(t *testing.T) {
 	}
 }
 
+func TestChtimesWithZeroTimes(t *testing.T) {
+	var uname syscall.Utsname
+	if err := syscall.Uname(&uname); err != nil {
+		t.Fatalf("Uname: %v", err)
+	}
+	t.Log("uname")
+
+	const utsnamelength = 65
+	buf := make([]byte, utsnamelength)
+	for i, b := range uname.Version {
+		buf[i] = byte(b)
+	}
+	ver := string(buf[:])
+	if i := strings.Index(ver, "\x00"); i != -1 {
+		ver = ver[:i]
+	}
+	t.Logf("%v", ver)
+
+	buf = make([]byte, utsnamelength)
+	for i, b := range uname.Release {
+		buf[i] = byte(b)
+	}
+	rel := string(buf[:])
+	if i := strings.Index(ver, "\x00"); i != -1 {
+		ver = ver[:i]
+	}
+	t.Logf("%v", rel)
+
+	file := newFile("chtimes-with-zero", t)
+	defer Remove(file.Name())
+
+	_, err := file.Write([]byte("hello, world\n"))
+	if err != nil {
+		t.Fatalf("Write: %s", err)
+	}
+	fName := file.Name()
+	file.Close()
+	fs, err := Stat(fName)
+	if err != nil {
+		t.Fatal(err)
+	}
+	startAtime := Atime(fs)
+	startMtime := fs.ModTime()
+	switch runtime.GOOS {
+	case "js":
+		startAtime = startAtime.Truncate(time.Second)
+		startMtime = startMtime.Truncate(time.Second)
+	}
+	at0 := startAtime
+	mt0 := startMtime
+	t0 := startMtime.Truncate(time.Second).Add(1 * time.Hour)
+
+	tests := []struct {
+		aTime     time.Time
+		mTime     time.Time
+		wantATime time.Time
+		wantMTime time.Time
+	}{
+		{
+			aTime:     time.Time{},
+			mTime:     time.Time{},
+			wantATime: startAtime,
+			wantMTime: startMtime,
+		},
+		{
+			aTime:     t0.Add(200 * time.Second),
+			mTime:     time.Time{},
+			wantATime: t0.Add(200 * time.Second),
+			wantMTime: startMtime,
+		},
+		{
+			mTime:     t0.Add(100 * time.Second),
+			wantATime: t0.Add(200 * time.Second),
+			wantMTime: t0.Add(100 * time.Second),
+		},
+		{
+			mTime:     t0.Add(100 * time.Second),
+			aTime:     t0.Add(300 * time.Second),
+			wantMTime: t0.Add(100 * time.Second),
+			wantATime: t0.Add(300 * time.Second),
+		},
+	}
+
+	for _, tt := range tests {
+		t.Logf("ATime:%q-MTime:%q", tt.aTime, tt.mTime)
+
+		// Now change the times accordingly.
+		if err := Chtimes(fName, tt.aTime, tt.mTime); err != nil {
+			t.Error(err)
+		}
+
+		// Finally verify the expectations.
+		fs, err = Stat(fName)
+		if err != nil {
+			t.Error(err)
+		}
+		at0 = Atime(fs)
+		mt0 = fs.ModTime()
+
+		if got, want := at0, tt.wantATime; !got.Equal(want) {
+			switch Getenv("GO_BUILDER_NAME") {
+			case "plan9-arm", "netbsd-amd64-9_0":
+				// Mtime cannot be handled on some builders.
+				// For netbsd, see issue 19293.
+			default:
+				t.Errorf("AccessTime mismatch:\ngot:  %q\nwant: %q", got, want)
+			}
+		}
+		if got, want := mt0, tt.wantMTime; !got.Equal(want) {
+			t.Errorf("ModTime mismatch:\ngot:  %q\nwant: %q", got, want)
+		}
+	}
+}
+
 func TestChdirAndGetwd(t *testing.T) {
 	// TODO(brainman): file.Chdir() is not implemented on windows.
 	if runtime.GOOS == "windows" {
diff --git a/src/syscall/fs_js.go b/src/syscall/fs_js.go
index 262ec28afd..54904167af 100644
--- a/src/syscall/fs_js.go
+++ b/src/syscall/fs_js.go
@@ -274,6 +274,8 @@ func Lchown(path string, uid, gid int) error {
 }
 
 func UtimesNano(path string, ts []Timespec) error {
+	// UTIME_OMIT value must match internal/syscall/unix/at_js.go
+	const UTIME_OMIT = -0x2
 	if err := checkPath(path); err != nil {
 		return err
 	}
@@ -282,6 +284,18 @@ func UtimesNano(path string, ts []Timespec) error {
 	}
 	atime := ts[0].Sec
 	mtime := ts[1].Sec
+	if atime == UTIME_OMIT || mtime == UTIME_OMIT {
+		var st Stat_t
+		if err := Stat(path, &st); err != nil {
+			return err
+		}
+		if atime == UTIME_OMIT {
+			atime = st.Atime
+		}
+		if mtime == UTIME_OMIT {
+			mtime = st.Mtime
+		}
+	}
 	_, err := fsCall("utimes", path, atime, mtime)
 	return err
 }
diff --git a/src/syscall/syscall_bsd.go b/src/syscall/syscall_bsd.go
index 1c7ec588bc..159988d9b6 100644
--- a/src/syscall/syscall_bsd.go
+++ b/src/syscall/syscall_bsd.go
@@ -523,12 +523,12 @@ func UtimesNano(path string, ts []Timespec) error {
 	if len(ts) != 2 {
 		return EINVAL
 	}
-	// Darwin setattrlist can set nanosecond timestamps
-	err := setattrlistTimes(path, ts)
+	err := utimensat(_AT_FDCWD, path, (*[2]Timespec)(unsafe.Pointer(&ts[0])), 0)
 	if err != ENOSYS {
 		return err
 	}
-	err = utimensat(_AT_FDCWD, path, (*[2]Timespec)(unsafe.Pointer(&ts[0])), 0)
+	// Darwin setattrlist can set nanosecond timestamps
+	err = setattrlistTimes(path, ts)
 	if err != ENOSYS {
 		return err
 	}
diff --git a/src/syscall/syscall_darwin.go b/src/syscall/syscall_darwin.go
index afdadbf894..37bba88c86 100644
--- a/src/syscall/syscall_darwin.go
+++ b/src/syscall/syscall_darwin.go
@@ -151,10 +151,7 @@ func libc_setattrlist_trampoline()
 //go:linkname libc_setattrlist libc_setattrlist
 //go:cgo_import_dynamic libc_setattrlist setattrlist "/usr/lib/libSystem.B.dylib"
 
-func utimensat(dirfd int, path string, times *[2]Timespec, flag int) error {
-	// Darwin doesn't support SYS_UTIMENSAT
-	return ENOSYS
-}
+//sys	utimensat(dirfd int, path string, times *[2]Timespec, flag int) (err error)
 
 /*
  * Wrapped
@@ -261,6 +258,16 @@ func Kill(pid int, signum Signal) (err error) { return kill(pid, int(signum), 1)
 //sys   openat(fd int, path string, flags int, perm uint32) (fdret int, err error)
 //sys	getcwd(buf []byte) (n int, err error)
 
+type Utsname struct {
+	Sysname  [65]byte
+	Nodename [65]byte
+	Release  [65]byte
+	Version  [65]byte
+	Machine  [65]byte
+}
+
+//sys   Uname(name *Utsname) (err error)
+
 func init() {
 	execveDarwin = execve
 }
diff --git a/src/syscall/syscall_windows.go b/src/syscall/syscall_windows.go
index f62c00d72f..875999b164 100644
--- a/src/syscall/syscall_windows.go
+++ b/src/syscall/syscall_windows.go
@@ -587,8 +587,14 @@ func Utimes(path string, tv []Timeval) (err error) {
 		return e
 	}
 	defer Close(h)
-	a := NsecToFiletime(tv[0].Nanoseconds())
-	w := NsecToFiletime(tv[1].Nanoseconds())
+	a := Filetime{}
+	w := Filetime{}
+	if tv[0].Nanoseconds() != 0 {
+		a = NsecToFiletime(tv[0].Nanoseconds())
+	}
+	if tv[0].Nanoseconds() != 0 {
+		w = NsecToFiletime(tv[1].Nanoseconds())
+	}
 	return SetFileTime(h, nil, &a, &w)
 }
 
@@ -607,8 +613,14 @@ func UtimesNano(path string, ts []Timespec) (err error) {
 		return e
 	}
 	defer Close(h)
-	a := NsecToFiletime(TimespecToNsec(ts[0]))
-	w := NsecToFiletime(TimespecToNsec(ts[1]))
+	a := Filetime{}
+	w := Filetime{}
+	if TimespecToNsec(ts[0]) != 0 {
+		a = NsecToFiletime(TimespecToNsec(ts[0]))
+	}
+	if TimespecToNsec(ts[1]) != 0 {
+		w = NsecToFiletime(TimespecToNsec(ts[1]))
+	}
 	return SetFileTime(h, nil, &a, &w)
 }
 
diff --git a/src/syscall/zsyscall_darwin_adm64.s b/src/syscall/zsyscall_darwin_adm64.s
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/src/syscall/zsyscall_darwin_amd64.go b/src/syscall/zsyscall_darwin_amd64.go
index 093739ebc7..cadf5445ee 100644
--- a/src/syscall/zsyscall_darwin_amd64.go
+++ b/src/syscall/zsyscall_darwin_amd64.go
@@ -19,7 +19,6 @@ func getgroups(ngid int, gid *_Gid_t) (n int, err error) {
 }
 
 func libc_getgroups_trampoline()
-
 //go:linkname libc_getgroups libc_getgroups
 //go:cgo_import_dynamic libc_getgroups getgroups "/usr/lib/libSystem.B.dylib"
 
@@ -34,7 +33,6 @@ func setgroups(ngid int, gid *_Gid_t) (err error) {
 }
 
 func libc_setgroups_trampoline()
-
 //go:linkname libc_setgroups libc_setgroups
 //go:cgo_import_dynamic libc_setgroups setgroups "/usr/lib/libSystem.B.dylib"
 
@@ -50,7 +48,6 @@ func wait4(pid int, wstatus *_C_int, options int, rusage *Rusage) (wpid int, err
 }
 
 func libc_wait4_trampoline()
-
 //go:linkname libc_wait4 libc_wait4
 //go:cgo_import_dynamic libc_wait4 wait4 "/usr/lib/libSystem.B.dylib"
 
@@ -66,7 +63,6 @@ func accept(s int, rsa *RawSockaddrAny, addrlen *_Socklen) (fd int, err error) {
 }
 
 func libc_accept_trampoline()
-
 //go:linkname libc_accept libc_accept
 //go:cgo_import_dynamic libc_accept accept "/usr/lib/libSystem.B.dylib"
 
@@ -81,7 +77,6 @@ func bind(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) {
 }
 
 func libc_bind_trampoline()
-
 //go:linkname libc_bind libc_bind
 //go:cgo_import_dynamic libc_bind bind "/usr/lib/libSystem.B.dylib"
 
@@ -96,7 +91,6 @@ func connect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) {
 }
 
 func libc_connect_trampoline()
-
 //go:linkname libc_connect libc_connect
 //go:cgo_import_dynamic libc_connect connect "/usr/lib/libSystem.B.dylib"
 
@@ -112,7 +106,6 @@ func socket(domain int, typ int, proto int) (fd int, err error) {
 }
 
 func libc_socket_trampoline()
-
 //go:linkname libc_socket libc_socket
 //go:cgo_import_dynamic libc_socket socket "/usr/lib/libSystem.B.dylib"
 
@@ -127,7 +120,6 @@ func getsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen
 }
 
 func libc_getsockopt_trampoline()
-
 //go:linkname libc_getsockopt libc_getsockopt
 //go:cgo_import_dynamic libc_getsockopt getsockopt "/usr/lib/libSystem.B.dylib"
 
@@ -142,7 +134,6 @@ func setsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr)
 }
 
 func libc_setsockopt_trampoline()
-
 //go:linkname libc_setsockopt libc_setsockopt
 //go:cgo_import_dynamic libc_setsockopt setsockopt "/usr/lib/libSystem.B.dylib"
 
@@ -157,7 +148,6 @@ func getpeername(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error) {
 }
 
 func libc_getpeername_trampoline()
-
 //go:linkname libc_getpeername libc_getpeername
 //go:cgo_import_dynamic libc_getpeername getpeername "/usr/lib/libSystem.B.dylib"
 
@@ -172,7 +162,6 @@ func getsockname(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error) {
 }
 
 func libc_getsockname_trampoline()
-
 //go:linkname libc_getsockname libc_getsockname
 //go:cgo_import_dynamic libc_getsockname getsockname "/usr/lib/libSystem.B.dylib"
 
@@ -187,7 +176,6 @@ func Shutdown(s int, how int) (err error) {
 }
 
 func libc_shutdown_trampoline()
-
 //go:linkname libc_shutdown libc_shutdown
 //go:cgo_import_dynamic libc_shutdown shutdown "/usr/lib/libSystem.B.dylib"
 
@@ -202,7 +190,6 @@ func socketpair(domain int, typ int, proto int, fd *[2]int32) (err error) {
 }
 
 func libc_socketpair_trampoline()
-
 //go:linkname libc_socketpair libc_socketpair
 //go:cgo_import_dynamic libc_socketpair socketpair "/usr/lib/libSystem.B.dylib"
 
@@ -224,7 +211,6 @@ func recvfrom(fd int, p []byte, flags int, from *RawSockaddrAny, fromlen *_Sockl
 }
 
 func libc_recvfrom_trampoline()
-
 //go:linkname libc_recvfrom libc_recvfrom
 //go:cgo_import_dynamic libc_recvfrom recvfrom "/usr/lib/libSystem.B.dylib"
 
@@ -245,7 +231,6 @@ func sendto(s int, buf []byte, flags int, to unsafe.Pointer, addrlen _Socklen) (
 }
 
 func libc_sendto_trampoline()
-
 //go:linkname libc_sendto libc_sendto
 //go:cgo_import_dynamic libc_sendto sendto "/usr/lib/libSystem.B.dylib"
 
@@ -261,7 +246,6 @@ func recvmsg(s int, msg *Msghdr, flags int) (n int, err error) {
 }
 
 func libc_recvmsg_trampoline()
-
 //go:linkname libc_recvmsg libc_recvmsg
 //go:cgo_import_dynamic libc_recvmsg recvmsg "/usr/lib/libSystem.B.dylib"
 
@@ -277,7 +261,6 @@ func sendmsg(s int, msg *Msghdr, flags int) (n int, err error) {
 }
 
 func libc_sendmsg_trampoline()
-
 //go:linkname libc_sendmsg libc_sendmsg
 //go:cgo_import_dynamic libc_sendmsg sendmsg "/usr/lib/libSystem.B.dylib"
 
@@ -293,7 +276,6 @@ func kevent(kq int, change unsafe.Pointer, nchange int, event unsafe.Pointer, ne
 }
 
 func libc_kevent_trampoline()
-
 //go:linkname libc_kevent libc_kevent
 //go:cgo_import_dynamic libc_kevent kevent "/usr/lib/libSystem.B.dylib"
 
@@ -313,7 +295,6 @@ func utimes(path string, timeval *[2]Timeval) (err error) {
 }
 
 func libc_utimes_trampoline()
-
 //go:linkname libc_utimes libc_utimes
 //go:cgo_import_dynamic libc_utimes utimes "/usr/lib/libSystem.B.dylib"
 
@@ -328,7 +309,6 @@ func futimes(fd int, timeval *[2]Timeval) (err error) {
 }
 
 func libc_futimes_trampoline()
-
 //go:linkname libc_futimes libc_futimes
 //go:cgo_import_dynamic libc_futimes futimes "/usr/lib/libSystem.B.dylib"
 
@@ -344,7 +324,6 @@ func fcntl(fd int, cmd int, arg int) (val int, err error) {
 }
 
 func libc_fcntl_trampoline()
-
 //go:linkname libc_fcntl libc_fcntl
 //go:cgo_import_dynamic libc_fcntl fcntl "/usr/lib/libSystem.B.dylib"
 
@@ -359,12 +338,30 @@ func pipe(p *[2]int32) (err error) {
 }
 
 func libc_pipe_trampoline()
-
 //go:linkname libc_pipe libc_pipe
 //go:cgo_import_dynamic libc_pipe pipe "/usr/lib/libSystem.B.dylib"
 
 // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
 
+func utimensat(dirfd int, path string, times *[2]Timespec, flag int) (err error) {
+	var _p0 *byte
+	_p0, err = BytePtrFromString(path)
+	if err != nil {
+		return
+	}
+	_, _, e1 := syscall6(funcPC(libc_utimensat_trampoline), uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(times)), uintptr(flag), 0, 0)
+	if e1 != 0 {
+		err = errnoErr(e1)
+	}
+	return
+}
+
+func libc_utimensat_trampoline()
+//go:linkname libc_utimensat libc_utimensat
+//go:cgo_import_dynamic libc_utimensat utimensat "/usr/lib/libSystem.B.dylib"
+
+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
+
 func kill(pid int, signum int, posix int) (err error) {
 	_, _, e1 := syscall(funcPC(libc_kill_trampoline), uintptr(pid), uintptr(signum), uintptr(posix))
 	if e1 != 0 {
@@ -374,7 +371,6 @@ func kill(pid int, signum int, posix int) (err error) {
 }
 
 func libc_kill_trampoline()
-
 //go:linkname libc_kill libc_kill
 //go:cgo_import_dynamic libc_kill kill "/usr/lib/libSystem.B.dylib"
 
@@ -394,7 +390,6 @@ func Access(path string, mode uint32) (err error) {
 }
 
 func libc_access_trampoline()
-
 //go:linkname libc_access libc_access
 //go:cgo_import_dynamic libc_access access "/usr/lib/libSystem.B.dylib"
 
@@ -409,7 +404,6 @@ func Adjtime(delta *Timeval, olddelta *Timeval) (err error) {
 }
 
 func libc_adjtime_trampoline()
-
 //go:linkname libc_adjtime libc_adjtime
 //go:cgo_import_dynamic libc_adjtime adjtime "/usr/lib/libSystem.B.dylib"
 
@@ -429,7 +423,6 @@ func Chdir(path string) (err error) {
 }
 
 func libc_chdir_trampoline()
-
 //go:linkname libc_chdir libc_chdir
 //go:cgo_import_dynamic libc_chdir chdir "/usr/lib/libSystem.B.dylib"
 
@@ -449,7 +442,6 @@ func Chflags(path string, flags int) (err error) {
 }
 
 func libc_chflags_trampoline()
-
 //go:linkname libc_chflags libc_chflags
 //go:cgo_import_dynamic libc_chflags chflags "/usr/lib/libSystem.B.dylib"
 
@@ -469,7 +461,6 @@ func Chmod(path string, mode uint32) (err error) {
 }
 
 func libc_chmod_trampoline()
-
 //go:linkname libc_chmod libc_chmod
 //go:cgo_import_dynamic libc_chmod chmod "/usr/lib/libSystem.B.dylib"
 
@@ -489,7 +480,6 @@ func Chown(path string, uid int, gid int) (err error) {
 }
 
 func libc_chown_trampoline()
-
 //go:linkname libc_chown libc_chown
 //go:cgo_import_dynamic libc_chown chown "/usr/lib/libSystem.B.dylib"
 
@@ -509,7 +499,6 @@ func Chroot(path string) (err error) {
 }
 
 func libc_chroot_trampoline()
-
 //go:linkname libc_chroot libc_chroot
 //go:cgo_import_dynamic libc_chroot chroot "/usr/lib/libSystem.B.dylib"
 
@@ -524,7 +513,6 @@ func Close(fd int) (err error) {
 }
 
 func libc_close_trampoline()
-
 //go:linkname libc_close libc_close
 //go:cgo_import_dynamic libc_close close "/usr/lib/libSystem.B.dylib"
 
@@ -539,7 +527,6 @@ func closedir(dir uintptr) (err error) {
 }
 
 func libc_closedir_trampoline()
-
 //go:linkname libc_closedir libc_closedir
 //go:cgo_import_dynamic libc_closedir closedir "/usr/lib/libSystem.B.dylib"
 
@@ -555,7 +542,6 @@ func Dup(fd int) (nfd int, err error) {
 }
 
 func libc_dup_trampoline()
-
 //go:linkname libc_dup libc_dup
 //go:cgo_import_dynamic libc_dup dup "/usr/lib/libSystem.B.dylib"
 
@@ -570,7 +556,6 @@ func Dup2(from int, to int) (err error) {
 }
 
 func libc_dup2_trampoline()
-
 //go:linkname libc_dup2 libc_dup2
 //go:cgo_import_dynamic libc_dup2 dup2 "/usr/lib/libSystem.B.dylib"
 
@@ -595,7 +580,6 @@ func Exchangedata(path1 string, path2 string, options int) (err error) {
 }
 
 func libc_exchangedata_trampoline()
-
 //go:linkname libc_exchangedata libc_exchangedata
 //go:cgo_import_dynamic libc_exchangedata exchangedata "/usr/lib/libSystem.B.dylib"
 
@@ -610,7 +594,6 @@ func Fchdir(fd int) (err error) {
 }
 
 func libc_fchdir_trampoline()
-
 //go:linkname libc_fchdir libc_fchdir
 //go:cgo_import_dynamic libc_fchdir fchdir "/usr/lib/libSystem.B.dylib"
 
@@ -625,7 +608,6 @@ func Fchflags(fd int, flags int) (err error) {
 }
 
 func libc_fchflags_trampoline()
-
 //go:linkname libc_fchflags libc_fchflags
 //go:cgo_import_dynamic libc_fchflags fchflags "/usr/lib/libSystem.B.dylib"
 
@@ -640,7 +622,6 @@ func Fchmod(fd int, mode uint32) (err error) {
 }
 
 func libc_fchmod_trampoline()
-
 //go:linkname libc_fchmod libc_fchmod
 //go:cgo_import_dynamic libc_fchmod fchmod "/usr/lib/libSystem.B.dylib"
 
@@ -655,7 +636,6 @@ func Fchown(fd int, uid int, gid int) (err error) {
 }
 
 func libc_fchown_trampoline()
-
 //go:linkname libc_fchown libc_fchown
 //go:cgo_import_dynamic libc_fchown fchown "/usr/lib/libSystem.B.dylib"
 
@@ -670,7 +650,6 @@ func Flock(fd int, how int) (err error) {
 }
 
 func libc_flock_trampoline()
-
 //go:linkname libc_flock libc_flock
 //go:cgo_import_dynamic libc_flock flock "/usr/lib/libSystem.B.dylib"
 
@@ -686,7 +665,6 @@ func Fpathconf(fd int, name int) (val int, err error) {
 }
 
 func libc_fpathconf_trampoline()
-
 //go:linkname libc_fpathconf libc_fpathconf
 //go:cgo_import_dynamic libc_fpathconf fpathconf "/usr/lib/libSystem.B.dylib"
 
@@ -701,7 +679,6 @@ func Fsync(fd int) (err error) {
 }
 
 func libc_fsync_trampoline()
-
 //go:linkname libc_fsync libc_fsync
 //go:cgo_import_dynamic libc_fsync fsync "/usr/lib/libSystem.B.dylib"
 
@@ -716,7 +693,6 @@ func Ftruncate(fd int, length int64) (err error) {
 }
 
 func libc_ftruncate_trampoline()
-
 //go:linkname libc_ftruncate libc_ftruncate
 //go:cgo_import_dynamic libc_ftruncate ftruncate "/usr/lib/libSystem.B.dylib"
 
@@ -729,7 +705,6 @@ func Getdtablesize() (size int) {
 }
 
 func libc_getdtablesize_trampoline()
-
 //go:linkname libc_getdtablesize libc_getdtablesize
 //go:cgo_import_dynamic libc_getdtablesize getdtablesize "/usr/lib/libSystem.B.dylib"
 
@@ -742,7 +717,6 @@ func Getegid() (egid int) {
 }
 
 func libc_getegid_trampoline()
-
 //go:linkname libc_getegid libc_getegid
 //go:cgo_import_dynamic libc_getegid getegid "/usr/lib/libSystem.B.dylib"
 
@@ -755,7 +729,6 @@ func Geteuid() (uid int) {
 }
 
 func libc_geteuid_trampoline()
-
 //go:linkname libc_geteuid libc_geteuid
 //go:cgo_import_dynamic libc_geteuid geteuid "/usr/lib/libSystem.B.dylib"
 
@@ -768,7 +741,6 @@ func Getgid() (gid int) {
 }
 
 func libc_getgid_trampoline()
-
 //go:linkname libc_getgid libc_getgid
 //go:cgo_import_dynamic libc_getgid getgid "/usr/lib/libSystem.B.dylib"
 
@@ -784,7 +756,6 @@ func Getpgid(pid int) (pgid int, err error) {
 }
 
 func libc_getpgid_trampoline()
-
 //go:linkname libc_getpgid libc_getpgid
 //go:cgo_import_dynamic libc_getpgid getpgid "/usr/lib/libSystem.B.dylib"
 
@@ -797,7 +768,6 @@ func Getpgrp() (pgrp int) {
 }
 
 func libc_getpgrp_trampoline()
-
 //go:linkname libc_getpgrp libc_getpgrp
 //go:cgo_import_dynamic libc_getpgrp getpgrp "/usr/lib/libSystem.B.dylib"
 
@@ -810,7 +780,6 @@ func Getpid() (pid int) {
 }
 
 func libc_getpid_trampoline()
-
 //go:linkname libc_getpid libc_getpid
 //go:cgo_import_dynamic libc_getpid getpid "/usr/lib/libSystem.B.dylib"
 
@@ -823,7 +792,6 @@ func Getppid() (ppid int) {
 }
 
 func libc_getppid_trampoline()
-
 //go:linkname libc_getppid libc_getppid
 //go:cgo_import_dynamic libc_getppid getppid "/usr/lib/libSystem.B.dylib"
 
@@ -839,7 +807,6 @@ func Getpriority(which int, who int) (prio int, err error) {
 }
 
 func libc_getpriority_trampoline()
-
 //go:linkname libc_getpriority libc_getpriority
 //go:cgo_import_dynamic libc_getpriority getpriority "/usr/lib/libSystem.B.dylib"
 
@@ -854,7 +821,6 @@ func Getrlimit(which int, lim *Rlimit) (err error) {
 }
 
 func libc_getrlimit_trampoline()
-
 //go:linkname libc_getrlimit libc_getrlimit
 //go:cgo_import_dynamic libc_getrlimit getrlimit "/usr/lib/libSystem.B.dylib"
 
@@ -869,7 +835,6 @@ func Getrusage(who int, rusage *Rusage) (err error) {
 }
 
 func libc_getrusage_trampoline()
-
 //go:linkname libc_getrusage libc_getrusage
 //go:cgo_import_dynamic libc_getrusage getrusage "/usr/lib/libSystem.B.dylib"
 
@@ -885,7 +850,6 @@ func Getsid(pid int) (sid int, err error) {
 }
 
 func libc_getsid_trampoline()
-
 //go:linkname libc_getsid libc_getsid
 //go:cgo_import_dynamic libc_getsid getsid "/usr/lib/libSystem.B.dylib"
 
@@ -898,7 +862,6 @@ func Getuid() (uid int) {
 }
 
 func libc_getuid_trampoline()
-
 //go:linkname libc_getuid libc_getuid
 //go:cgo_import_dynamic libc_getuid getuid "/usr/lib/libSystem.B.dylib"
 
@@ -911,7 +874,6 @@ func Issetugid() (tainted bool) {
 }
 
 func libc_issetugid_trampoline()
-
 //go:linkname libc_issetugid libc_issetugid
 //go:cgo_import_dynamic libc_issetugid issetugid "/usr/lib/libSystem.B.dylib"
 
@@ -927,7 +889,6 @@ func Kqueue() (fd int, err error) {
 }
 
 func libc_kqueue_trampoline()
-
 //go:linkname libc_kqueue libc_kqueue
 //go:cgo_import_dynamic libc_kqueue kqueue "/usr/lib/libSystem.B.dylib"
 
@@ -947,7 +908,6 @@ func Lchown(path string, uid int, gid int) (err error) {
 }
 
 func libc_lchown_trampoline()
-
 //go:linkname libc_lchown libc_lchown
 //go:cgo_import_dynamic libc_lchown lchown "/usr/lib/libSystem.B.dylib"
 
@@ -972,7 +932,6 @@ func Link(path string, link string) (err error) {
 }
 
 func libc_link_trampoline()
-
 //go:linkname libc_link libc_link
 //go:cgo_import_dynamic libc_link link "/usr/lib/libSystem.B.dylib"
 
@@ -987,7 +946,6 @@ func Listen(s int, backlog int) (err error) {
 }
 
 func libc_listen_trampoline()
-
 //go:linkname libc_listen libc_listen
 //go:cgo_import_dynamic libc_listen listen "/usr/lib/libSystem.B.dylib"
 
@@ -1007,7 +965,6 @@ func Mkdir(path string, mode uint32) (err error) {
 }
 
 func libc_mkdir_trampoline()
-
 //go:linkname libc_mkdir libc_mkdir
 //go:cgo_import_dynamic libc_mkdir mkdir "/usr/lib/libSystem.B.dylib"
 
@@ -1027,7 +984,6 @@ func Mkfifo(path string, mode uint32) (err error) {
 }
 
 func libc_mkfifo_trampoline()
-
 //go:linkname libc_mkfifo libc_mkfifo
 //go:cgo_import_dynamic libc_mkfifo mkfifo "/usr/lib/libSystem.B.dylib"
 
@@ -1047,7 +1003,6 @@ func Mknod(path string, mode uint32, dev int) (err error) {
 }
 
 func libc_mknod_trampoline()
-
 //go:linkname libc_mknod libc_mknod
 //go:cgo_import_dynamic libc_mknod mknod "/usr/lib/libSystem.B.dylib"
 
@@ -1068,7 +1023,6 @@ func Mlock(b []byte) (err error) {
 }
 
 func libc_mlock_trampoline()
-
 //go:linkname libc_mlock libc_mlock
 //go:cgo_import_dynamic libc_mlock mlock "/usr/lib/libSystem.B.dylib"
 
@@ -1083,7 +1037,6 @@ func Mlockall(flags int) (err error) {
 }
 
 func libc_mlockall_trampoline()
-
 //go:linkname libc_mlockall libc_mlockall
 //go:cgo_import_dynamic libc_mlockall mlockall "/usr/lib/libSystem.B.dylib"
 
@@ -1104,7 +1057,6 @@ func Mprotect(b []byte, prot int) (err error) {
 }
 
 func libc_mprotect_trampoline()
-
 //go:linkname libc_mprotect libc_mprotect
 //go:cgo_import_dynamic libc_mprotect mprotect "/usr/lib/libSystem.B.dylib"
 
@@ -1125,7 +1077,6 @@ func Munlock(b []byte) (err error) {
 }
 
 func libc_munlock_trampoline()
-
 //go:linkname libc_munlock libc_munlock
 //go:cgo_import_dynamic libc_munlock munlock "/usr/lib/libSystem.B.dylib"
 
@@ -1140,7 +1091,6 @@ func Munlockall() (err error) {
 }
 
 func libc_munlockall_trampoline()
-
 //go:linkname libc_munlockall libc_munlockall
 //go:cgo_import_dynamic libc_munlockall munlockall "/usr/lib/libSystem.B.dylib"
 
@@ -1161,7 +1111,6 @@ func Open(path string, mode int, perm uint32) (fd int, err error) {
 }
 
 func libc_open_trampoline()
-
 //go:linkname libc_open libc_open
 //go:cgo_import_dynamic libc_open open "/usr/lib/libSystem.B.dylib"
 
@@ -1182,7 +1131,6 @@ func Pathconf(path string, name int) (val int, err error) {
 }
 
 func libc_pathconf_trampoline()
-
 //go:linkname libc_pathconf libc_pathconf
 //go:cgo_import_dynamic libc_pathconf pathconf "/usr/lib/libSystem.B.dylib"
 
@@ -1204,7 +1152,6 @@ func Pread(fd int, p []byte, offset int64) (n int, err error) {
 }
 
 func libc_pread_trampoline()
-
 //go:linkname libc_pread libc_pread
 //go:cgo_import_dynamic libc_pread pread "/usr/lib/libSystem.B.dylib"
 
@@ -1226,7 +1173,6 @@ func Pwrite(fd int, p []byte, offset int64) (n int, err error) {
 }
 
 func libc_pwrite_trampoline()
-
 //go:linkname libc_pwrite libc_pwrite
 //go:cgo_import_dynamic libc_pwrite pwrite "/usr/lib/libSystem.B.dylib"
 
@@ -1248,7 +1194,6 @@ func read(fd int, p []byte) (n int, err error) {
 }
 
 func libc_read_trampoline()
-
 //go:linkname libc_read libc_read
 //go:cgo_import_dynamic libc_read read "/usr/lib/libSystem.B.dylib"
 
@@ -1261,7 +1206,6 @@ func readdir_r(dir uintptr, entry *Dirent, result **Dirent) (res Errno) {
 }
 
 func libc_readdir_r_trampoline()
-
 //go:linkname libc_readdir_r libc_readdir_r
 //go:cgo_import_dynamic libc_readdir_r readdir_r "/usr/lib/libSystem.B.dylib"
 
@@ -1288,7 +1232,6 @@ func Readlink(path string, buf []byte) (n int, err error) {
 }
 
 func libc_readlink_trampoline()
-
 //go:linkname libc_readlink libc_readlink
 //go:cgo_import_dynamic libc_readlink readlink "/usr/lib/libSystem.B.dylib"
 
@@ -1313,7 +1256,6 @@ func Rename(from string, to string) (err error) {
 }
 
 func libc_rename_trampoline()
-
 //go:linkname libc_rename libc_rename
 //go:cgo_import_dynamic libc_rename rename "/usr/lib/libSystem.B.dylib"
 
@@ -1333,7 +1275,6 @@ func Revoke(path string) (err error) {
 }
 
 func libc_revoke_trampoline()
-
 //go:linkname libc_revoke libc_revoke
 //go:cgo_import_dynamic libc_revoke revoke "/usr/lib/libSystem.B.dylib"
 
@@ -1353,7 +1294,6 @@ func Rmdir(path string) (err error) {
 }
 
 func libc_rmdir_trampoline()
-
 //go:linkname libc_rmdir libc_rmdir
 //go:cgo_import_dynamic libc_rmdir rmdir "/usr/lib/libSystem.B.dylib"
 
@@ -1369,7 +1309,6 @@ func Seek(fd int, offset int64, whence int) (newoffset int64, err error) {
 }
 
 func libc_lseek_trampoline()
-
 //go:linkname libc_lseek libc_lseek
 //go:cgo_import_dynamic libc_lseek lseek "/usr/lib/libSystem.B.dylib"
 
@@ -1384,7 +1323,6 @@ func Select(n int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval) (err error) {
 }
 
 func libc_select_trampoline()
-
 //go:linkname libc_select libc_select
 //go:cgo_import_dynamic libc_select select "/usr/lib/libSystem.B.dylib"
 
@@ -1399,7 +1337,6 @@ func Setegid(egid int) (err error) {
 }
 
 func libc_setegid_trampoline()
-
 //go:linkname libc_setegid libc_setegid
 //go:cgo_import_dynamic libc_setegid setegid "/usr/lib/libSystem.B.dylib"
 
@@ -1414,7 +1351,6 @@ func Seteuid(euid int) (err error) {
 }
 
 func libc_seteuid_trampoline()
-
 //go:linkname libc_seteuid libc_seteuid
 //go:cgo_import_dynamic libc_seteuid seteuid "/usr/lib/libSystem.B.dylib"
 
@@ -1429,7 +1365,6 @@ func Setgid(gid int) (err error) {
 }
 
 func libc_setgid_trampoline()
-
 //go:linkname libc_setgid libc_setgid
 //go:cgo_import_dynamic libc_setgid setgid "/usr/lib/libSystem.B.dylib"
 
@@ -1449,7 +1384,6 @@ func Setlogin(name string) (err error) {
 }
 
 func libc_setlogin_trampoline()
-
 //go:linkname libc_setlogin libc_setlogin
 //go:cgo_import_dynamic libc_setlogin setlogin "/usr/lib/libSystem.B.dylib"
 
@@ -1464,7 +1398,6 @@ func Setpgid(pid int, pgid int) (err error) {
 }
 
 func libc_setpgid_trampoline()
-
 //go:linkname libc_setpgid libc_setpgid
 //go:cgo_import_dynamic libc_setpgid setpgid "/usr/lib/libSystem.B.dylib"
 
@@ -1479,7 +1412,6 @@ func Setpriority(which int, who int, prio int) (err error) {
 }
 
 func libc_setpriority_trampoline()
-
 //go:linkname libc_setpriority libc_setpriority
 //go:cgo_import_dynamic libc_setpriority setpriority "/usr/lib/libSystem.B.dylib"
 
@@ -1494,7 +1426,6 @@ func Setprivexec(flag int) (err error) {
 }
 
 func libc_setprivexec_trampoline()
-
 //go:linkname libc_setprivexec libc_setprivexec
 //go:cgo_import_dynamic libc_setprivexec setprivexec "/usr/lib/libSystem.B.dylib"
 
@@ -1509,7 +1440,6 @@ func Setregid(rgid int, egid int) (err error) {
 }
 
 func libc_setregid_trampoline()
-
 //go:linkname libc_setregid libc_setregid
 //go:cgo_import_dynamic libc_setregid setregid "/usr/lib/libSystem.B.dylib"
 
@@ -1524,7 +1454,6 @@ func Setreuid(ruid int, euid int) (err error) {
 }
 
 func libc_setreuid_trampoline()
-
 //go:linkname libc_setreuid libc_setreuid
 //go:cgo_import_dynamic libc_setreuid setreuid "/usr/lib/libSystem.B.dylib"
 
@@ -1539,7 +1468,6 @@ func Setrlimit(which int, lim *Rlimit) (err error) {
 }
 
 func libc_setrlimit_trampoline()
-
 //go:linkname libc_setrlimit libc_setrlimit
 //go:cgo_import_dynamic libc_setrlimit setrlimit "/usr/lib/libSystem.B.dylib"
 
@@ -1555,7 +1483,6 @@ func Setsid() (pid int, err error) {
 }
 
 func libc_setsid_trampoline()
-
 //go:linkname libc_setsid libc_setsid
 //go:cgo_import_dynamic libc_setsid setsid "/usr/lib/libSystem.B.dylib"
 
@@ -1570,7 +1497,6 @@ func Settimeofday(tp *Timeval) (err error) {
 }
 
 func libc_settimeofday_trampoline()
-
 //go:linkname libc_settimeofday libc_settimeofday
 //go:cgo_import_dynamic libc_settimeofday settimeofday "/usr/lib/libSystem.B.dylib"
 
@@ -1585,7 +1511,6 @@ func Setuid(uid int) (err error) {
 }
 
 func libc_setuid_trampoline()
-
 //go:linkname libc_setuid libc_setuid
 //go:cgo_import_dynamic libc_setuid setuid "/usr/lib/libSystem.B.dylib"
 
@@ -1610,7 +1535,6 @@ func Symlink(path string, link string) (err error) {
 }
 
 func libc_symlink_trampoline()
-
 //go:linkname libc_symlink libc_symlink
 //go:cgo_import_dynamic libc_symlink symlink "/usr/lib/libSystem.B.dylib"
 
@@ -1625,7 +1549,6 @@ func Sync() (err error) {
 }
 
 func libc_sync_trampoline()
-
 //go:linkname libc_sync libc_sync
 //go:cgo_import_dynamic libc_sync sync "/usr/lib/libSystem.B.dylib"
 
@@ -1645,7 +1568,6 @@ func Truncate(path string, length int64) (err error) {
 }
 
 func libc_truncate_trampoline()
-
 //go:linkname libc_truncate libc_truncate
 //go:cgo_import_dynamic libc_truncate truncate "/usr/lib/libSystem.B.dylib"
 
@@ -1658,7 +1580,6 @@ func Umask(newmask int) (oldmask int) {
 }
 
 func libc_umask_trampoline()
-
 //go:linkname libc_umask libc_umask
 //go:cgo_import_dynamic libc_umask umask "/usr/lib/libSystem.B.dylib"
 
@@ -1678,7 +1599,6 @@ func Undelete(path string) (err error) {
 }
 
 func libc_undelete_trampoline()
-
 //go:linkname libc_undelete libc_undelete
 //go:cgo_import_dynamic libc_undelete undelete "/usr/lib/libSystem.B.dylib"
 
@@ -1698,7 +1618,6 @@ func Unlink(path string) (err error) {
 }
 
 func libc_unlink_trampoline()
-
 //go:linkname libc_unlink libc_unlink
 //go:cgo_import_dynamic libc_unlink unlink "/usr/lib/libSystem.B.dylib"
 
@@ -1718,7 +1637,6 @@ func Unmount(path string, flags int) (err error) {
 }
 
 func libc_unmount_trampoline()
-
 //go:linkname libc_unmount libc_unmount
 //go:cgo_import_dynamic libc_unmount unmount "/usr/lib/libSystem.B.dylib"
 
@@ -1740,7 +1658,6 @@ func write(fd int, p []byte) (n int, err error) {
 }
 
 func libc_write_trampoline()
-
 //go:linkname libc_write libc_write
 //go:cgo_import_dynamic libc_write write "/usr/lib/libSystem.B.dylib"
 
@@ -1762,7 +1679,6 @@ func writev(fd int, iovecs []Iovec) (cnt uintptr, err error) {
 }
 
 func libc_writev_trampoline()
-
 //go:linkname libc_writev libc_writev
 //go:cgo_import_dynamic libc_writev writev "/usr/lib/libSystem.B.dylib"
 
@@ -1778,7 +1694,6 @@ func mmap(addr uintptr, length uintptr, prot int, flag int, fd int, pos int64) (
 }
 
 func libc_mmap_trampoline()
-
 //go:linkname libc_mmap libc_mmap
 //go:cgo_import_dynamic libc_mmap mmap "/usr/lib/libSystem.B.dylib"
 
@@ -1793,7 +1708,6 @@ func munmap(addr uintptr, length uintptr) (err error) {
 }
 
 func libc_munmap_trampoline()
-
 //go:linkname libc_munmap libc_munmap
 //go:cgo_import_dynamic libc_munmap munmap "/usr/lib/libSystem.B.dylib"
 
@@ -1809,7 +1723,6 @@ func fork() (pid int, err error) {
 }
 
 func libc_fork_trampoline()
-
 //go:linkname libc_fork libc_fork
 //go:cgo_import_dynamic libc_fork fork "/usr/lib/libSystem.B.dylib"
 
@@ -1824,7 +1737,6 @@ func ioctl(fd int, req int, arg int) (err error) {
 }
 
 func libc_ioctl_trampoline()
-
 //go:linkname libc_ioctl libc_ioctl
 //go:cgo_import_dynamic libc_ioctl ioctl "/usr/lib/libSystem.B.dylib"
 
@@ -1849,7 +1761,6 @@ func execve(path *byte, argv **byte, envp **byte) (err error) {
 }
 
 func libc_execve_trampoline()
-
 //go:linkname libc_execve libc_execve
 //go:cgo_import_dynamic libc_execve execve "/usr/lib/libSystem.B.dylib"
 
@@ -1864,7 +1775,6 @@ func exit(res int) (err error) {
 }
 
 func libc_exit_trampoline()
-
 //go:linkname libc_exit libc_exit
 //go:cgo_import_dynamic libc_exit exit "/usr/lib/libSystem.B.dylib"
 
@@ -1885,7 +1795,6 @@ func sysctl(mib []_C_int, old *byte, oldlen *uintptr, new *byte, newlen uintptr)
 }
 
 func libc_sysctl_trampoline()
-
 //go:linkname libc_sysctl libc_sysctl
 //go:cgo_import_dynamic libc_sysctl sysctl "/usr/lib/libSystem.B.dylib"
 
@@ -1916,7 +1825,6 @@ func unlinkat(fd int, path string, flags int) (err error) {
 }
 
 func libc_unlinkat_trampoline()
-
 //go:linkname libc_unlinkat libc_unlinkat
 //go:cgo_import_dynamic libc_unlinkat unlinkat "/usr/lib/libSystem.B.dylib"
 
@@ -1937,7 +1845,6 @@ func openat(fd int, path string, flags int, perm uint32) (fdret int, err error)
 }
 
 func libc_openat_trampoline()
-
 //go:linkname libc_openat libc_openat
 //go:cgo_import_dynamic libc_openat openat "/usr/lib/libSystem.B.dylib"
 
@@ -1959,12 +1866,25 @@ func getcwd(buf []byte) (n int, err error) {
 }
 
 func libc_getcwd_trampoline()
-
 //go:linkname libc_getcwd libc_getcwd
 //go:cgo_import_dynamic libc_getcwd getcwd "/usr/lib/libSystem.B.dylib"
 
 // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
 
+func Uname(name *Utsname) (err error) {
+	_, _, e1 := syscall(funcPC(libc_uname_trampoline), uintptr(unsafe.Pointer(name)), 0, 0)
+	if e1 != 0 {
+		err = errnoErr(e1)
+	}
+	return
+}
+
+func libc_uname_trampoline()
+//go:linkname libc_uname libc_uname
+//go:cgo_import_dynamic libc_uname uname "/usr/lib/libSystem.B.dylib"
+
+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
+
 func Fstat(fd int, stat *Stat_t) (err error) {
 	_, _, e1 := syscall(funcPC(libc_fstat64_trampoline), uintptr(fd), uintptr(unsafe.Pointer(stat)), 0)
 	if e1 != 0 {
@@ -1974,7 +1894,6 @@ func Fstat(fd int, stat *Stat_t) (err error) {
 }
 
 func libc_fstat64_trampoline()
-
 //go:linkname libc_fstat64 libc_fstat64
 //go:cgo_import_dynamic libc_fstat64 fstat64 "/usr/lib/libSystem.B.dylib"
 
@@ -1989,7 +1908,6 @@ func Fstatfs(fd int, stat *Statfs_t) (err error) {
 }
 
 func libc_fstatfs64_trampoline()
-
 //go:linkname libc_fstatfs64 libc_fstatfs64
 //go:cgo_import_dynamic libc_fstatfs64 fstatfs64 "/usr/lib/libSystem.B.dylib"
 
@@ -2004,7 +1922,6 @@ func Gettimeofday(tp *Timeval) (err error) {
 }
 
 func libc_gettimeofday_trampoline()
-
 //go:linkname libc_gettimeofday libc_gettimeofday
 //go:cgo_import_dynamic libc_gettimeofday gettimeofday "/usr/lib/libSystem.B.dylib"
 
@@ -2024,7 +1941,6 @@ func Lstat(path string, stat *Stat_t) (err error) {
 }
 
 func libc_lstat64_trampoline()
-
 //go:linkname libc_lstat64 libc_lstat64
 //go:cgo_import_dynamic libc_lstat64 lstat64 "/usr/lib/libSystem.B.dylib"
 
@@ -2044,7 +1960,6 @@ func Stat(path string, stat *Stat_t) (err error) {
 }
 
 func libc_stat64_trampoline()
-
 //go:linkname libc_stat64 libc_stat64
 //go:cgo_import_dynamic libc_stat64 stat64 "/usr/lib/libSystem.B.dylib"
 
@@ -2064,7 +1979,6 @@ func Statfs(path string, stat *Statfs_t) (err error) {
 }
 
 func libc_statfs64_trampoline()
-
 //go:linkname libc_statfs64 libc_statfs64
 //go:cgo_import_dynamic libc_statfs64 statfs64 "/usr/lib/libSystem.B.dylib"
 
@@ -2084,7 +1998,6 @@ func fstatat(fd int, path string, stat *Stat_t, flags int) (err error) {
 }
 
 func libc_fstatat64_trampoline()
-
 //go:linkname libc_fstatat64 libc_fstatat64
 //go:cgo_import_dynamic libc_fstatat64 fstatat64 "/usr/lib/libSystem.B.dylib"
 
@@ -2100,6 +2013,5 @@ func ptrace(request int, pid int, addr uintptr, data uintptr) (err error) {
 }
 
 func libc_ptrace_trampoline()
-
 //go:linkname libc_ptrace libc_ptrace
 //go:cgo_import_dynamic libc_ptrace ptrace "/usr/lib/libSystem.B.dylib"
diff --git a/src/syscall/zsyscall_darwin_amd64.s b/src/syscall/zsyscall_darwin_amd64.s
index d99656d028..7d5c519eab 100644
--- a/src/syscall/zsyscall_darwin_amd64.s
+++ b/src/syscall/zsyscall_darwin_amd64.s
@@ -53,6 +53,8 @@ TEXT ·libc_fcntl_trampoline(SB),NOSPLIT,$0-0
 	JMP	libc_fcntl(SB)
 TEXT ·libc_pipe_trampoline(SB),NOSPLIT,$0-0
 	JMP	libc_pipe(SB)
+TEXT ·libc_utimensat_trampoline(SB),NOSPLIT,$0-0
+	JMP	libc_utimensat(SB)
 TEXT ·libc_kill_trampoline(SB),NOSPLIT,$0-0
 	JMP	libc_kill(SB)
 TEXT ·libc_access_trampoline(SB),NOSPLIT,$0-0
@@ -235,6 +237,8 @@ TEXT ·libc_openat_trampoline(SB),NOSPLIT,$0-0
 	JMP	libc_openat(SB)
 TEXT ·libc_getcwd_trampoline(SB),NOSPLIT,$0-0
 	JMP	libc_getcwd(SB)
+TEXT ·libc_uname_trampoline(SB),NOSPLIT,$0-0
+	JMP	libc_uname(SB)
 TEXT ·libc_fstat64_trampoline(SB),NOSPLIT,$0-0
 	JMP	libc_fstat64(SB)
 TEXT ·libc_fstatfs64_trampoline(SB),NOSPLIT,$0-0
-- 
2.28.0.windows.1

